# Avalon

Productivity boost for cocos2d-x developers.

Avalon provides various extension, helpers, libraries, classes, templates &
functions on top of [cocos2d-x][]. It should speed up cross-platform development
and automate annoying tasks.

# Installation

## General

1. Checkout avalon to you project directory near `Classes` folder
1. Don't forget `git submodule update --init`

## iOS

1. Add  __Avalon.xcodeproj__ to you project as subproject

## Android

1. **TODO: IMPORT COCOS2D-X PROJECT INTO WORKSPACE**
1. Add `LOCAL_WHOLE_STATIC_LIBRARIES += avalon_static` to `jni/Android.mk`
1. Add `$(call import-module,../../avalon)` to `jni/Android.mk`
1. **Optional** Declare additional features with `AVALON_FEATURES`
    * available features AVALON_FEATURES := "gamecenter, payment, appirater, flurry, flurryads, notifications" 

### Features

#### Game Center

##### Ios
1. Add  GameCenter to `Build Phases` `Target Dependencies`
1. Add  libGameCenter.a to `Build Phases` `Link Binary With Libraries`
1. Add  GameKit.framework to `Build Phases` `Link Binary With Libraries`


##### Android
1. Add `gamecenter` to `AVALON_FEATURES` in your `jni/Android.mk` 

###### Amazon

1. Set `AVALON_PLATFORM_FLAVOR` to `amazon` in your `jni/Android.mk`
1. Import `GameCenterAmazon` form /avalon/proj.android into work space
1. Add to Project->properties->Android->Library `GameCenterAmazon`

###### Google

1. Set `AVALON_PLATFORM_FLAVOR` to `google` in your `jni/Android.mk`
1. Import `GameCenterGoogle` form /avalon/proj.android into work space
1. Import `google-play-servicel_lib` form /avalon/proj.android into work space
1. Add to Project->properties->Android->Library `GameCenterGoogle`
1. Create file `ids.xml` in `proj.android/res/values` folder of you project
   with following content
   
        <?xml version="1.0" encoding="utf-8"?>

        <resources>
            <string name="app_id">50439291110</string>
            <string name="#Scrore1Name">#Score1Id</string>
            ...
            <string name="#Achievement1Name">#Achievement1Id</string>
            ...
        </resources> 


1. Ensure the internet permission in your `AndroidManifest.xml`

        <uses-permission android:name="android.permission.INTERNET"/>
1. Ensure the `application` `meta-data` in your `AndroidManifest.xml`  
       
        <application>
            ...
            <meta-data 
               android:name="com.google.android.gms.version" 
               android:value="@integer/google_play_services_version" />
            <meta-data 
              android:name="com.google.android.gms.games.APP_ID"
              android:value="@string/app_id" />
            ...
        </application>        

#### Payment

##### Ios
1. Add  Payment to `Build Phases` `Target Dependencies`
1. Add  libPayment.a to `Build Phases` `Link Binary With Libraries`
1. Add  StoreKit.framework to `Build Phases` `Link Binary With Libraries`

##### Android
1. Add `payment` to `AVALON_FEATURES` in your `jni/Android.mk` 
2. Add android rsa key to resources `googleplay_rsa_key`

###### Amazon

1. Set `AVALON_PLATFORM_FLAVOR` to `amazon` in your `jni/Android.mk`
1. Import `PaymentAmazon` form /avalon/proj.android into work space
1. Add to Project->properties->Android->Library `PaymentAmazon`
1. Ensure the internet permission in your `AndroidManifest.xml`

        <uses-permission android:name="android.permission.INTERNET"/>

1. Ensure the `application` `receiver` in your `AndroidManifest.xml`

        <application>
            ...
            <receiver android:name="com.amazon.inapp.purchasing.ResponseReceiver" >
                <intent-filter>
                    <action android:name="com.amazon.inapp.purchasing.NOTIFY"
                            android:permission="com.amazon.inapp.purchasing.Permission.NOTIFY" />
                </intent-filter>
            </receiver>
            ...
        </application>
        

###### Google


1. Set `AVALON_PLATFORM_FLAVOR` to `google` in your `jni/Android.mk`
1. Import `PaymentGoogle` form /avalon/proj.android into work space
1. Add to Project->properties->Android->Library `PaymentGoogle`
1. Ensure following permissions in your `AndroidManifest.xml`

        <uses-permission android:name="android.permission.INTERNET"/>
        <uses-permission android:name="com.android.vending.BILLING"/>

#### Appirater

##### Ios
1. Add  Appirater to `Build Phases` `Target Dependencies`
1. Add  libAppirater.a to `Build Phases` `Link Binary With Libraries`
1. Add  StoreKit.framework to `Build Phases` `Link Binary With Libraries`
1. Add  SystemConfiguration.framework to `Build Phases` `Link Binary With Libraries`

##### Android
1. Add `appirater` to `AVALON_FEATURES` in your `jni/Android.mk` 
1. Import `Appirater` form /avalon/proj.android into work space
1. Add to Project->properties->Android->Library `Appirater`
1. Ensure the `ACCESS_NETWORK_STATE` ne permission in your `AndroidManifest.xml`

        <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE"/>

#### Flurry

##### Ios
1. Add  Flurry to `Build Phases` `Target Dependencies`
1. Add  libFlurry.a to `Build Phases` `Link Binary With Libraries`
1. Add  SystemConfiguration.framework to `Build Phases` `Link Binary With Libraries`
1. Add  Security.framework to `Build Phases` `Link Binary With Libraries`

##### Android
1. Add `flurry` to `AVALON_FEATURES` in your `jni/Android.mk` 
1. Import `Flurry` form /avalon/proj.android into work space
1. Add to Project->properties->Android->Library `Flurry`
1. Ensure the internet permission in your `AndroidManifest.xml`

        <uses-permission android:name="android.permission.INTERNET"/>

#### FlurryAds

##### Ios
1. Add  FlurryAds to `Build Phases` `Target Dependencies`
1. Add  libFlurryAds.a to `Build Phases` `Link Binary With Libraries`
1. Add  AddSupport.framework to `Build Phases` `Link Binary With Libraries`
1. Add  SystemConfiguration.framework to `Build Phases` `Link Binary With Libraries`
1. Add  AddSupport.framework to `Build Phases` `Link Binary With Libraries`
1. Add  Security.framework to `Build Phases` `Link Binary With Libraries`
1. Add  MediaPlayer.framework to `Build Phases` `Link Binary With Libraries`

##### Android
1. Add `flurryAds` to `AVALON_FEATURES` in your `jni/Android.mk` 
1. Import `FlurryAds` form /avalon/proj.android into work space
1. Add to Project->properties->Android->Library `FlurryAds`
1. Ensure the following activity configuration in your `AndroidManifest.xml`

#### Notificatios

##### Ios
1. Add  Notificatios to `Build Phases` `Target Dependencies`
1. Add  libNotificatios.a to `Build Phases` `Link Binary With Libraries`
1. Add   `#import "avalon/platform/ios/notifications/NotificationsAppController.h"` to your `AppController.h`
1. Subclass your AppController from NotificationsAppController

        @interface AppController : NotificationsAppController
        
##### Android
1. Add `notificatios` to `AVALON_FEATURES` in your `jni/Android.mk` 
1. Import `Notificatios` form /avalon/proj.android into work space
1. Add to Project->properties->Android->Library `Notificatios`

###### Local Notifications
1. To restore local only notifications after reboot ensure following permissions in your `AndroidManifest.xml`

        <uses-permission android:name="android.permission.RECEIVE_BOOT_COMPLETED" />

1. Ensure the `application` `receivers` in your `AndroidManifest.xml`

        <application>
            ...
            <receiver android:name="com.avalon.notifications.LocalNotificationsReceiver" />

            <receiver android:name="com.avalon.notifications.LocalNotificationsRestore" >
                <intent-filter>
                    <action android:name="android.intent.action.BOOT_COMPLETED" />
                </intent-filter>
            </receiver>
            ...
        </application>  
            
###### Remote Notifications  
        
1. Ensure the `application` `meta-data` in your `AndroidManifest.xml`  
       
        <application>
            ...
            <meta-data 
               android:name="com.google.android.gms.version" 
               android:value="@integer/google_play_services_version" />
            ...
        </application> 
    
1. Ensure following permissions for remote notifications in your `AndroidManifest.xml`

        <uses-permission android:name="android.permission.INTERNET"/>
        <uses-permission android:name="android.permission.GET_ACCOUNTS" />
    
        <permission android:name="{package}.permission.C2D_MESSAGE" android:protectionLevel="signature" />
        <uses-permission android:name="{package}.cpp.permission.C2D_MESSAGE" />
        <uses-permission android:name="com.google.android.c2dm.permission.RECEIVE" />
        
    where `{package}` is you package name example `com.google.example`
    
1. Ensure the `application` `receivers` in your `AndroidManifest.xml`

        <application>
            ...
        
            <receiver
                android:name="com.avalon.notifications.GcmBroadcastReceiver"
                android:permission="com.google.android.c2dm.permission.SEND" >
                <intent-filter>
                    <!-- Receives the actual messages. -->
                    <action android:name="com.google.android.c2dm.intent.RECEIVE" />
                    <category android:name="{package}" />
                </intent-filter>
            </receiver>
            
        where `{package}` is you package name example `com.google.example`
        
1. Add following code to main Activity  `AppActivity` 

        void onCreate(final Bundle savedInstanceState) {
            ...
        
            Notifications.setContext(this);
            Notifications.processIntent(getIntent());
            
        void onPause() {
            ...
        
            Notifications.onPause();
            
        void onNewIntent(Intent intent) {
            Notifications.processIntent(intent);
            ...


# Documentations

* [Wiki Cocos2d-x](http://wiki.cocos2d-x.org)
* [Cocos2d-x API Reference](http://www.cocos2d-x.org/reference/native-cpp/index.html)

# License

    The MIT License (MIT)

    Copyright (c) 2014 Sergey Pereplitsa <non_2001@mail.ru>
    Copyright (c) 2013 Michael Contento <michaelcontento@gmail.com>
                       Jochen Heizmann  <info@intermediaware.de>

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in
    all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
    THE SOFTWARE.


[cocos2d-x]: http://cocos2d-x.org/
